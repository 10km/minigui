.\" This manpage is Copyright (C) 2000 Wei Yongming
.\"                               2000 BluePoint Software
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since MiniGUI is constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.TH "Cursor" "3" "July 2000" "MiniGUI"
.SH NAME
Cursor \- the functions handling cursor in MiniGUI
.SH SYNOPSIS
.B #include <minigui/minigui.h>
.PP
.BI "HCURSOR GUIAPI LoadCursorFromFile" "(const char* filename);"
.br
.BI "HCURSOR GUIAPI CreateCursor" "(int xhotspot, int yhotspot, int w, int h, const BYTE* pANDBits, const BYTE* pXORBits, int colornum);"
.br
.BI "BOOL GUIAPI DestroyCursor" "(HCURSOR hcsr);"
.br
.BI "HCURSOR GUIAPI GetSystemCursor" "(int csrid);"
.br
.BI "HCURSOR GUIAPI GetCurrentCursor" "(void);"
.br
.BI "void GUIAPI ClipCursor" "(const RECT* prc);"
.br
.BI "void GUIAPI GetClipCursor" "(RECT* prc);"
.br
.BI "void GUIAPI GetCursorPos" "(POINT* ppt);"
.br
.BI "void GUIAPI SetCursorPos" "(int x, int y);"
.br
.BI "HCURSOR GUIAPI SetCursor" "(HCURSOR hcsr);"
.br
.BI "int GUIAPI ShowCursor" "(BOOL fShow);"
.br
.BI "BOOL GUIAPI RefreshCursor" "(int* x, int* y, int* button);"
.br
.SH DESCRIPTION
.PP
\fBLoadCursorFromFile\fP function loads a cursor from Windows *.cur file named \fBfilename\fP and returns the handle of loaded cursor. The returned handle can be used by \fBSetCursor\fP to set new mouse cursor.
.PP
\fBCreateCursor\fP function creates a cursor from memory data rather than cursor file. \fBxhotspot\fP and \fByhotspot\fP specify hotpot of the cursor, \fBw\fP and \fBh\fP are the width and the height of the cursor respectively. \fBfANDBits\fP and \fBfXORBits\fP are AND bitmask and XOR bitmask of the cursor. MiniGUI currently support mono-color cursor and 16-color cursor, \fBcolornum\fP specifies the cursor's color number. For mono-color, it should be 1, and for 16-color cursor, it should be 4.
.PP
\fBDestroyCursor\fP function destroys a cursor object specified by \fBhcsr\fP.
.PP
\fBGetSystemCursor\fP function gets a system default cursor object. When startup, MiniGUI loads system cursors according to MiniGUI.cfg file. There are 14 system cursors by default, and can be refered with the following IDs:
.SH Cursor IDs
.IP \fBIDC_ARROW\fR
Normal arrow cursor
.IP \fBIDC_IBEAM\fR
I-shape cursor, indicate an input field
.IP \fBIDC_PENCIL\fR
Pencil-shape cursor
.IP \fBIDC_CROSS\fR
Cross cursor
.IP \fBIDC_MOVE\fR
Moving cursor
.IP \fBIDC_SIZENWSE\fR
Sizing cursor, along north-west and south-east 
.IP \fBIDC_SIZENESW\fR
Sizing cursor, along north-east and south-west
.IP \fBIDC_SIZEWE\fR
Sizing cursor, along west and east
.IP \fBIDC_SIZENS\fR
Sizing cursor, along north and south
.IP \fBIDC_UPARROW\fR
Up arrow cursor
.IP \fBIDC_NONE\fR
None cursor
.IP \fBIDC_HELP\fR
Arrow with question
.IP \fBIDC_BUSY\fR
Busy cursor
.IP \fBIDC_WAIT\fR
Wait cursor
.PP
Returned cursor handle can be used by \fBSetCursor\fP to set new mouse cursor.  Note that you should not destroy any system cursor.
.PP
\fBGetCurrentCursor\fP function gets the handle of current cursor.
.PP
\fBClipCursor\fP function sets cursor's clipping rectangle. \fBprc\fP is the new clipping rectangle in screen coordinates. If \fBprc\fP is NULL, \fBClipCursor\fP will disable cursor clipping.
.PP
\fBGetClipCursor\fP function copies current clipping rectangle to a RECT pointed to by \fBprc\fP.
.PP
\fBGetCursorPos\fP function copies current mouse postion to a POINT pointed to by \fBppt\fP.
.PP
\fBSetCursorPos\fP function sets mouse position with given parameter \fBx,y\fP.
.PP
\fBSetCursor\fP function sets cursor to given cursor handle. \fBhcsr\fP can be a handle returned by \fBLoadCursor\fP, \fBCreateCursor\fP, and \fBGetSystemCursor\fP. This function will return the previous cursor handle.
.PP
\fBShowCursor\fP function shows or hides cursor according to parameter \fBfShow\fP. Show cursor when \fBfShow\fP is TRUE, and hide cursor when \fBfShow\fP is FALSE.
.PP
\fBRefreshCursor\fP function updates cursor position and status, and return new position in \fBx, y\fP, new buttion status in \fBbutton\fP. The returned value indicates whether mouse has moved, \fBTRUE\fP for moved.
.SH AUTHOR
.PP
This manual page was edited by WEI Yongming <ymwei@minigui.org>.
If you have any problems, comments or found some bugs, please send messages to me.

