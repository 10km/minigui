.\" This manpage is Copyright (C) 2000 Wei Yongming
.\"                               2000 BluePoint Software
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since MiniGUI is constantly changing, this
.\" manual page may be incorrect or out-of-date. The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.TH "Functions" "3" "Nov. 2000" "MiniGUI"

.SH "NAME"
Functions \- Function list of MiniGUI version 1.x.

.SH "miniguiAccelerator" (3)
.TP
.B CopyAcceleratorTable
Return a copy of the specified accelerator table.
.TP
.B DeleteAccelerators
Delete a accelerator from the specified accelerator table.
.TP
.B AddAccelerators
Add a accelerator to the specified accelerator table.
.TP
.B DestroyAcceleratorTable
Destroy the specified accelerator table.
.TP
.B CreateAcceleratorTable
Create a empty accelerator table for a main window.
.TP
.B LoadAccelerators
Load accelerators from the specified file.

.SH "miniguiAsyncKey" (3)
.TP
.B GetKeyStatus
Get the status of a key or a mouse button.

.TP
.B GetShiftKeyStatus
Get the status of shift keys.

.SH "miniguiBitmap" (3)
.TP
.B RegisterBitmapFileType
Register a bitmap file loader and saver.
.TP
.B LoadBitmap
Loads a bitmap from a bitmap file into a BITMAP struct. Note the BITMAP is a compiled bitmap object.
.TP
.B LoadMyBitmap
Loads a bitmap from a bitmap file into a MYBITMAP struct. Note that MYBITMAP is not a compiled bitmap object.
.TP
.B CreateBitmapFromGIFFile
Creates a bitmap from a GIF image file. Implemented when \fB_OLD_NATIVE_GIFJPG\fP is defined (use \fB--enable-gifjpg\fP when run configure). This function is a obsoleted one, new application should use \fBLoadBitmap\fP instead.
.TP
.B CreateBitmapFromGIFMemory
Creates a bitmap from a buffer filled with data from a GIF image file. Implemented when \fB_OLD_NATIVE_GIFJPG\fP is defined (use \fB--enable-gifjpg\fP when run configure). This function is a obsoleted one, new application should use \fBLoadBitmap\fP instead.
.TP
.B CreateBitmapFromJPGFile
This function is similar with \fBCreateBitmapFromGIFFile\fP, but this function used to create bitmap from a JPG image file. Implemented when \fB_OLD_NATIVE_GIFJPG\fP is defined (use \fB--enable-gifjpg\fP when run configure). This function is a obsoleted one, new application should use \fBLoadBitmap\fP instead.
.TP
.B CreateBitmapFromJPGMemory
This function is similar with \fBCreateBitmapFromGIFMemory\fP, but the buffer is filled with data from a JPG image file.  Implemented when \fB_OLD_NATIVE_GIFJPG\fP is defined (use \fB--enable-gifjpg\fP when run configure). This function is a obsoleted one, new application should use \fBLoadBitmap\fP instead. 
.TP
.B UnloadBitmap
Frees the memory used by the bitmap object.
.TP
.B SaveBitmap
Save a bitmap object to a file. Implemented when \fB_MGMISC_SAVEBITMAP\fP is defined (use \fB--enable-savebitmap\fP when run configure).
.TP
.B ExpandMyBitmap
Expand a MYBITMAP object to a compiled BITMAP object.
.TP
.B ExpandMonoBitmap
Expand a mono bitmap object to a compiled BITMAP object.
.TP
.B Expand16CBitmap
Expand a bitmap object with 16-color palette to a compiled BITMAP object.
.TP
.B Expand256CBitmap
Expand a bitmap object with 256-color palette to a compiled BITMAP object.
.TP
.B CompileRGBBitmap
Expand a RGB bitmap object to a compiled BITMAP object.
.TP
.B ReplaceBitmapColor
Replaces a color with a new color in the bitmap object.
.TP
.B FillBox
Fills a box with the current brush in the DC. Note that MiniGUI only defined the color property for the brush objects.
.TP
.B FillBoxWithBitmap
Fills a box with a bitmap object. 
.TP
.B FillBoxWithBitmapPart
Fills a box with a part of a bitmap oject.
.TP
.B BitBlt
Performs a bit-block transfer of the color data cooresponding to a rectangle of pixels from the specfied source dispaly context  into a destination display context.
.TP
.B StretchBlt
Copies a bitmap from a source rectangle into a destination rectangle, streching or compressing the bitmap to fit the dimension of the destination rectangle, if necessary.

.SH "miniguiCaretHandler" (3)
.TP
.B CreateCaret
Creates a new shape for the system caret and assigns ownership of the caret to the specified window. The caret shape can be a line, a block, or a bitmap. 
.TP
.B ChangeCaretSize
Changes the size (width and height) of the caret owned by the specified window.
.TP
.B ActiveCaret
Activates the caret owned by specified window.
.TP
.B GetCaretBlinkTime
Returns the elapsed time, in milliseconds, required to invert the caret's pixels. 
.TP
.B SetCaretBlinkTime
Sets the caret blink time to the specified number of milliseconds. The blink time is the elapsed time, in milliseconds, required to invert the caret's pixels. 
.TP
.B DestroyCaret
Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen. 
.TP
.B HideCaret
Removes the caret from the screen. Hiding a caret does not destroy its current shape or invalidate the insertion point. 
.TP
.B ShowCaret
Makes the caret visible on the screen at the caret's current position. When the caret becomes visible, it begins flashing automatically. 
.TP
.B SetCaretPos
Moves the caret to the specified coordinates. 
.TP
.B GetCaretPos
Copies the caret's position, in client coordinates, to the specified \fBPOINT\fP structure.

.SH "miniguiClipRectHeap" (3)
.TP
.B InitFreeClipRectList
Allocates memory from system heap for free clip rect list, and initializes the list.
.TP
.B ClipRectAlloc
Allocates a clip rect from the initialized list.
.TP
.B FreeClipRect
Frees the clip rect allocated by \fBClipRectAlloc\fP.
.TP
.B EmptyFreeClipRectList
Resets the heap used.
.TP
.B DestroyFreeClipRectList
Destroys the free clip list by empting the list and freeing the heap.

.SH "miniguiCreateWindow" (3)
.TP
.B CreateWindow
Creates a child window. 
.TP
.B CreateWindowEx
Creates a child window with extended styles.
.TP
.B DestroyWindow
Destroys the specified window.

.SH "miniguiCursor" (3)
.TP
.B LoadCursorFromFile
Loads a cursor from Windows *.cur file returns the handle of loaded cursor. 
.TP
.B CreateCursor
Creates a cursor from memory data rather than cursor file. 
.TP
.B DestroyCursor
Destroys a cursor object.
.TP
.B GetSystemCursor
Gets a system default cursor object. 
.TP
.B GetCurrentCursor
Gets the handle of current cursor.
.TP
.B ClipCursor
Sets cursor's clipping rectangle.
.TP
.B GetClipCursor
Copies current clipping rectangle of cursor to a RECT.
.TP
.B GetCursorPos
Copies current mouse postion to a POINT.
.TP
.B SetCursorPos
Sets mouse position with given parameter.
.TP
.B SetCursor
Sets cursor to given cursor handle.
.TP
.B ShowCursor
Shows or hides cursor.
.TP
.B RefreshCursor
Updates cursor position and status, and return new position and  new buttion status.

.SH "miniguiDC" (3)
.TP
.B GetDC
Gets a window DC of the specified window.
.TP
.B GetClientDC
Gets a client DC of the specified window.
.TP
.B ReleaseDC
Releases the DC returned by \fBGetDC\fP or \fBGetClientDC\fP.
.TP
.B CreateCompatibleDC
Creates a DC which is compatible with specified DC.
.TP
.B DeleteCompatibleDC
Deletes the DC created by \fBCreateCompatibleDC\fP.
.TP
.B CreatePrivateDC
Creates a private window DC of the window and returns the handle of the DC. 
.TP
.B CreatePrivateClientDC
Creates a private client DC of the window and returns the handle of the DC.
.TP
.B GetPrivateClientDC
Returns the private client DC of the window with style WS_EX_USEPRIVATECDC.
.TP
.B DeletePrivateDC
Deletes the DC returned by \fBCreatePrivateDC\fP or \fBCreatePrivateClientDC\fP.

.SH "miniguiDCAttr" (3)
.TP
.B GetGDCapability
Returns a capability specified of the DC.
.TP
.B GetBkColor
Gets the background color of the DC.
.TP
.B SetBkColor
Sets the background color of the DC.
.TP
.B GetBkMode
Gets the background mode of the DC.
.TP
.B SetBkMode
Sets the background mode of the DC.
.TP
.B GetTextColor
Gets the text color of the DC.
.TP
.B SetTextColor
Sets the text color to of the DC.
.TP
.B GetTabStop
Gets the tab stops of the DC.
.TP
.B SetTabStop
Sets the tab stops of the DC to a new value.

.SH "miniguiDCClipping"
.TP
.B ExcludeClipRect
Excludes the specified rect from the local clipping region of the DC.
.TP
.B IncludeClipRect
Includes the specified rect into the local clipping region of the DC.
.TP
.B ClipRectIntersect
Intersects the specified rect with the local clipping region of the DC.
.TP
.B SelectClipRect
Sets the local clipping region of the DC to the rect.
.TP
.B SelectClipRegion
Sets the local clipping region of the DC to the region.
.TP
.B GetBoundsRect
Retrives the bounding rect of the current local clipping region of the DC.
.TP
.B PtVisible
Checks whether the point visible, i.e. it is within the current local clipping region of the DC.
.TP
.B RectVisible
Checks whether the rect is visible, i.e. it is intersected with the current local clipping region of the DC.

.SH "miniguiDTI" (3)
.TP
.B CustomizeDesktopMenu
Will be called automatically by MiniGUI when you click right button on MiniGUI's desktop.
.TP
.B CustomDesktopCommand
Will be called automatically by MiniGUI when you choose command on MiniGUI's desktop menu.
.TP
.B OpenAboutDialog
Tells desktop to open an \fBAbout MiniGUI...\fP dialog.

.SH "miniguiDialogBox" (3)
.TP
.B CreateMainWindowIndirect
Creates a main window from a dialog template.
.TP
.B DestroyMainWindowIndirect
Destroys the window created by \fBCreateMainWindowIndirect\fP.
.TP
.B DialogBoxIndirectParam
Creates a modal dialog box from a dialog box template in memory. 
.TP
.B EndDialog
Destroys a modal dialog box, causing the system to end any processing for the dialog box. 
.TP
.B DestroyAllControls
Destroys all the controls in the dialog box.
.TP
.B DefaultDialogProc
Is the default dialog box message handler.
.TP
.B GetDlgDefPushButton
Gets the default push button in the window specified by hWnd.
.TP
.B GetDlgCtrlID
Returns the identifier of the specified control.
.TP
.B GetDlgItem
Retrieves the handle of a control in the specified dialog box.
.TP
.B GetDlgItemInt
Translates the text of a specified control in a dialog box into an integer value. 
.TP
.B GetDlgItemText
Retrieves the title or text associated with a control in a dialog box. 
.TP
.B GetDlgItemText2
Is similiar to \fBGetDlgItemText\fP function.But it allocates memory for the text.
.TP
.B GetNextDlgGroupItem
Retrieves the handle of the first control in a group of controls that precedes (or follows) the specified control in a dialog box. 
.TP
.B GetNextDlgTabItem
Retrieves the handle of the first control that has the \fBWS_TABSTOP\fP style that precedes (or follows) the specified control. 
.TP
.B SendDlgItemMessage
Sends a message to the specified control in a dialog box. 
.TP
.B SetDlgItemInt
Sets the text of a control in a dialog box to the string representation of a specified integer value. 
.TP
.B SetDlgItemText
Sets the title or text of a control in a dialog box.
.TP
.B CheckDlgButton
Changes the check status of a button control.
.TP
.B CheckRadioButton
Adds a check mark to (checks) a specified radio button in a group and removes a check mark from (clears) all other radio buttons in the group.
.TP
.B IsDlgButtonChecked
Determines whether a button control has a check mark next to it or whether a three-state button control is grayed, checked, or neither.

.SH "miniguiDrawing" (3)
.TP
.B GetPixel
Gets pixel at the specified position on the DC.
.TP
.B SetPixel
Sets pixel at the specified position on the DC.
.TP
.B GetPixelRGB
Gets pixel's RGB values at the specified position on the DC.
.TP
.B SetPixelRGB
Sets pixle at the specified position with RGB value on the DC.
.TP
.B RGB2Pixel
Converts RGB value to pixel value. Note that the range of a RGB value is 0~0xFF.
.TP
.B MoveTo
Moves the current line position to the specified position.
.TP
.B LineTo
Draws a line from the current position to the specified position with current pen color. 
.TP
.B Circle
Draws a circle with current pen color.
.TP
.B Rectangle
Draws a rectangle with current pen color.
.TP
.B FocusRect
Draws a focus rectanglt with current pen color. Focus rectangle is composed with dashed lines.

.SH "miniguiEtcFile" (3)
.TP
.B GetValueFromEtcFile
Gets a value (a string) with the specified key from the specified section in the specified etc file.
.TP
.B GetIntValueFromEtcFile
Gets a integer with the specified key from the specified section in the specified etc file.
.TP
.B SetValueToEtcFile
Sets the value of specified key in the specified section in the specified etc file.

.SH "miniguiFixStr" (3)
.TP
.B FixStrAlloc
Allocates memory in MiniGUI's length-fixed string heap.
.TP
.B FreeFixStr
Frees the memory allocated by \fBFixStrAlloc\fP.


.SH "miniguiGetSysText"
.TP
.B GetSysText
When MiniGUI display some system messages, it will call \fBGetSysText\fP function to translate system text. You can use \fBgettext\fP to return the text. Global variable \fBSysText\fP contains all text used by MiniGUI.

.SH "miniguiHook" (3)
.TP
.B RegisterKeyMsgHook
Registers a key message hook and associates with the specified main window.
.TP
.B RegisterMouseMsgHook
Registers a mouse message hook and associate with the specified main window.
.TP
.B UnregisterHook
Removes the specified key or mouse message hook.

.SH "miniguiIME" (3)
.TP
.B IMEWinProc
Is the message handling function of the default IME window.
.TP
.B IMEWindow
Creates an IME window.
.TP
.B RegisterIMEWindow
Registers an IME window. After that, the keyboard input will be sent to IME window first.
.TP
.B UnregisterIMEWindow
Undoes the effect of \fBRegisterIMEWindow\fP.
.TP
.B GetIMEStatus
Retrieves some status of the IME window. 
.TP
.B SetIMEStatus
Sets some status of the IME window. 

.SH "miniguiIcon" (3)
.TP
.B LoadIconFromFile
Load icon from a Windows ICO file and creates an icon object. 
.TP
.B CreateIcon
Creates an icon object from the memory. 
.TP
.B DestroyIcon
Destroys the icon object.
.TP
.B DrawIcon
Draws the icon in a box.

.SH "miniguiInit" (3)
.TP
.B InitGUI
Initializes MiniGUI support system. It will allocate and load resources used by MiniGUI, create threads which act as mini servers, and more important, set vedio mode according to MiniGUI.cfg file.  This function will be called automatically by \fBmain\fP function.  Applications should avoid calling this function directly. 
.TP
.B TerminateGUI
Is normally called by application's main function.  According to the returned value of \fBMiniGUIMain\fR function, \fBTerminateGUI\fR either suspends calling thread and waits system threads, or just kills all threads except calling thread, frees resources used by MiniGUI, sets vedio card back to text mode, and then terminates MiniGUI application.

.SH "miniguiLogFont" (3)
.TP
.B CreateLogFont
Creates a logical font. Note that the size of logical font may be different from the size expected, and you can specify \fBrotation\fP only for TrueType font. The \fBrotation\fP is in units of tenth degrees.
.TP
.B CreateLogFontIndirect
Creates a logical font. Note that the size of logical font may be different from the size expected.
.TP
.B DestroyLogFont
Destroys a logical font.
.TP
.B GetSystemFont
Retrives the system logical font.
.TP
.B GetCurFont
Retrives the current logical font in the DC. When initializes a DC, MiniGUI will set system font as its default logical font. 
.TP
.B SelectFont
Selects a logical font into the DC. This function returns the handle to the old logical font.


.SH "miniguiMain"
.TP
.B MiniGUIMain
Usually, \fBMiniGUIMain\fP function is the entrance of each MiniGUI-based program. In this function, you can create one or more threads for specified main windows. 

.SH "miniguiMainWindow" (3)
.TP
.B ExcludeWindowStyle
Removes one window style from style set of windows.
.TP
.B IncludeWindowStyle
Adds window style into style set of windows.
.TP
.B CreateMainWindow
Creates main window.
.TP
.B DestroyMainWindow
Destroys main window and release relative resource.
.TP
.B DefaultMainWinProc
Handles window default message.
.TP
.B DefaultControlProc
Handles control default messgae.
.TP
.B UpdateWindow
Updates the client area of the specified window by sending a WM_PAINT message to the window.
.TP
.B ShowWindow
Sets the specified window's show state with one in (SW_SHOWNORMAL, SW_SHOW, SW_HIDE).  (3)
.TP
.B EnableWindow
Enables or disables mouse and keyboard input to the specified window or control. When input is disabled, the window does not receive input such as mouse clicks and key presses. When input is enabled, the window receives all input.
.TP
.B IsWindowEnabled
Determines whether the specified window is enabled for mouse and keyboard input. 
.TP
.B GetClientRect
Retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner are (0,0).
.TP
.B GetWindowBkColor
Returns window current background color.
.TP
.B SetWindowBkColor
Sets window background color.
.TP
.B GetWindowCursor
Gets current cursor of window or control.
.TP
.B SetWindowCursor
Sets current cursor of window or control.
.TP
.B GetWindowStyle
Gets style set of window or control.
.TP
.B GetWindowExStyle
Gets expand style set of window or control.
.TP
.B GetWindowAdditionalData
Returns additional data of window or control.
.TP
.B SetWindowAdditionalData
Sets additional data of window or control and return old data. 
.TP
.B GetWindowAdditionalData2
Is same with \fBGetWindowAdditionalData\fP, but returns the second data. 
.TP
.B SetWindowAdditionalData2
Is same with \fBSetWindowAdditionalData\fP, but sets the second data. 
.TP
.B GetWindowClassAdditionalData
Gets additional data of control class. 
.TP
.B SetWindowClassAdditionalData
Sets additional data of control class and return old one.
.TP
.B GetWindowCaption
Returns the text of the specified window's title bar.
.TP
.B SetWindowCaption
Changes the text of the specified window's caption.
.TP
.B InvalidateRect
Adds a rectangle to the specified window's update region. The update region represents the portion of the window's client area that must be redrawn, and remain background if parameter bReaseBkgnd is set.
.TP
.B BeginPaint
Prepares the specified window for painting. 
.TP
.B EndPaint
Marks the end of painting in the specified window. This function is required for each call to the BeginPaint function, but only after painting is complete. 
.TP
.B ClientWidthToWindowWidth
Returns window width computed with client area width, window border and scroll width. 
.TP
.B ClientHeightToWindowHeight
Returns window width computed with client area width, window border,window caption,window menu and scroll width. 
.TP
.B ClientToScreen
Converts the client coordinates of a specified point to screen coordinates. 
.TP
.B ScreenToClient
Converts the screen coordinates of a specified point on the screen to client coordinates. 
.TP
.B WindowToScreen
Converts the window coordinates of a specified point to screen coordinates. 
.TP
.B ScreenToWindow
Converts the screen coordinates of a specified point on the screen to window coordinates. 
.TP
.B IsMainWindow
Tests if window associate main window, return true if does. 
.TP
.B IsControl
Tests if window associate is control, return true if does. 
.TP
.B IsWindow
Determines whether the specified window handle identifies an existing window. 
.TP
.B GetParent
Retrieves a handle to the specified child window's parent window. 
.TP
.B IsWindowVisible
Retrieves the visibility state of the specified window. 
.TP
.B GetWindowRect
Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen. 
.TP
.B GetHosting
Gets current window's hosting windows, a window share message queue with its hosting window.
.TP
.B GetFirstHosted
Gets current window's first hosted window, current window is hosting window of return window. 
.TP
.B GetNextHosted
Gets next hosted window.
.TP
.B GetWindowTextLength
Retrieves the length, in characters, of the specified window's text. If the specified window is a control, the function retrieves the length of the text within the control. 
.TP
.B GetWindowText
Copies the text of the specified window's into a buffer. If the specified window is a control, the text of the control is copied. 
.TP
.B SetWindowText
Changes the text of the specified window's text. 
.TP
.B SetFocus
Sets the keyboard focus to the specified window. The window must be associated with the calling thread's message queue. 
.TP
.B GetFocus
Retrieves the handle to the window that has the keyboard focus, if the window is associated with the calling thread's message queue. 
.TP
.B GetFocusChild
Retrieves the handle to the window's active child that has the keyboard focus, if the window is associated with the calling thread's message queue. 
.TP
.B SetActiveWindow
Activates a window. The window must be associated with the calling thread's message queue. 
.TP
.B GetActiveWindow
Retrieves the window handle to the active window associated with the calling thread's message queue. 
.TP
.B SetCapture
Sets the mouse capture to the specified window belonging to the current thread. Once a window has captured the mouse, all mouse input is directed to that window, regardless of whether the cursor is within the borders of that window. Only one window at a time can capture the mouse.
.TP
.B GetCapture
Retrieves the handle of the window (if any) that has captured the mouse. Only one window at a time can capture the mouse; this window receives mouse input whether or not the cursor is within its borders. 
.TP
.B ReleaseCapture
Releases the mouse capture from a window in the current thread and restores normal mouse input processing. A window that has captured the mouse receives all mouse input, regardless of the position of the cursor, except when a mouse button is clicked while the cursor hot spot is in the window of another thread. 
.TP
.B MoveWindow
Changes the position and dimensions of the specified window. For a top-level window, the position and dimensions are relative to the upper-left corner of the screen. For a child window, they are relative to the upper-left corner of the parent window's client area. 
.TP
.B ScrollWindow
Scrolls the content of the specified window's client area. The ScrollWindow function exists. 
.TP
.B EnableScrollBar
Enables or disables one or both scroll bar arrows. 
.TP
.B GetScrollPos
Retrieves the current position of the scroll box (thumb) in the specified scroll bar. The current position is a relative value that depends on the current scrolling range. 
.TP
.B GetScrollRange
Sets the position of the scroll box (thumb) in the specified scroll bar and, if requested, redraws the scroll bar to reflect the new position of the scroll box. 
.TP
.B SetScrollPos
Sets the position of the scroll box (thumb) in the specified scroll bar and, if requested, redraws the scroll bar to reflect the new position of the scroll box. 
.TP
.B SetScrollRange
Sets the minimum and maximum position values for the specified scroll bar. 
.TP
.B ShowScrollBar
Shows or hides the specified scroll bar. 
.TP
.B SetScrollInfo
SetScrollInfo function sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). The function also redraws the scroll bar, if requested. 
.TP
.B GetScrollInfo
GetScrollInfo function retrieves the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). 
.TP
.B GetMainWindowHandle
Retrieves the handle of the control's main window if hWnd point to a control,otherwise it just return hWnd.
.TP
.B CreateThreadForMainWindow
Creates a thread belong to the calling
.TP
.B GetMainWinThread
Retrieves the main thread of the main window.
.TP
.B MainWindowThreadCleanup
Clean up all the threads belong to the main window.
.TP
.B WaitMainWindowClose
Waits untill the window's main thread exits.
.TP
.B LoadSystemBitmap
Load in bitmaps provided by the system. 
.TP
.B LoadSystemIcon
Load in icons provided by the system. 

.SH "miniguiMapTransf" (3)
.TP
.B DPtoLP
Converts device coordinates into logical coordinates. 
.TP
.B LPtoDP
Converts logical coordinates into device coordinates. 

.SH "miniguiMapping" (3)

.TP
.B GetMapMode
Retrives the current mapping mode.
.TP
.B GetViewportExt
Retrieves the x-extents and y-extents of the current viewport for the specified display context \fBhdc\fP. 
.TP
.B GetViewportOrg
Retrieves the x-coordinates and y-coordinates of the viewport orgin for the specified display context. 
.TP
.B GetWindowExt
Retrives the x-extents and y-extents of the window for the specified display context. 
.TP
.B GetWindowOrg
Retrives the x-coordinates and y-coordinates of the window origin for the specified device context. 
.TP
.B SetMapMode
Sets the mapping mode of the specified display context. 
.TP
.B SetViewportExt
Sets the horizontal and vertical extents of the viewport for a display context by using the specified values in struct \fBpPt\fP.
.TP
.B SetViewportOrg
Sets the viewport origin of a display context by using the specified coordinates in struct \fBpPt\fP.
.TP
.B SetWindowExt
Sets the horizontal and vertical extents of the window for a display context by using the specified values in struct \fBpPt\fP.
.TP
.B SetWindowOrg
Sets the window origin of the display context by using the specified coordinates in struct \fBpPt\fP.

.SH "miniguiMenu" (3)

.TP
.B LoadMenuFromFile
Loads a menu from a external file. The function is not implemented at current time.
.TP
.B CreateMenu
Creates an empty menu.
.TP
.B CreatePopupMenu
Creates an empty drop-down menu or submenu.
.TP
.B CreateSystemMenu
Creates a system menu.
.TP
.B InsertMenuItem
Inserts a new menu item at the specified position in a menu.
.TP
.B RemoveMenu
Deletes a menu item or detaches a submenu from the specified menu. 
.TP
.B DeleteMenu
Deletes an item from the specified menu. 
.TP
.B DestroyMenu
Destroys the specified menu and frees any memory that the menu occupies. 
.TP
.B IsMenu
Determines whether a handle is a menu handle. 
.TP
.B SetMenu
Assigns a new menu to the specified window. 
.TP
.B GetMenu
Retrieves the handle to the menu assigned to the given window. 
.TP
.B DrawMenuBar
Redraws the menu bar of the specified window.
.TP
.B TrackMenuBar
Displays the specified submenu.
.TP
.B TrackPopupMenu
Displays a shortcut menu at the specified location and tracks the selection of items on the menu.
.TP
.B GetMenuBarItemRect
Retrieves the rect of the menu bar item specified by the parameter \fBpos\fP.
.TP
.B HiliteMenuBarItem
Draws the specified menubar item with 3D effect.
.TP
.B GetMenuItemCount
Determines the number of items in the specified menu. 
.TP
.B GetMenuItemID
Retrieves the menu item identifier of a menu item at specified position in a menu. 
.TP
.B GetMenuItemInfo
Retrieves information about a menu item.
.TP
.B GetMenuItemRect
Retrieves the bounding rectangle for the specified menu item.
.TP
.B GetPopupSubMenu
Retrieves the submenu of the specified popup menu.
.TP
.B StripPopupHead
Strips the header of popup menu and returns the submenu of the popup menu.
.TP
.B GetSubMenu
Retrieves the handle to the drop-down menu or submenu activated by the specified menu item. 
.TP
.B GetSystemMenu
Allows the application to access the window menu (also known as the system menu or the control menu) for copying and modifying.  
.TP
.B EnableMenuItem
Enables, disables, or grays the specified menu item. 
.TP
.B CheckMenuRadioItem
Checks a specified menu item and makes it a radio item. 
.TP
.B SetMenuItemBitmaps
Associates the specified bitmap with a menu item. 
.TP
.B SetMenuItemInfo
Changes information about a menu item.


.SH "miniguiMessage" (3)
.TP
.B GetMessage
Gets a message from the message queue of the window.
.TP
.B HavePendingMessage
Checks if there is any message in the message queue. 
.TP
.B PostMessage
Posts a message into the message queue of the window and returns immediatly. 
.TP
.B SendMessage
Sends a message to the window.
.TP
.B PostSyncMessage
Posts a synchronous message to the destination window, and returns until the message is handled by the window procedure. Note that the destination window must belong to other thread.
.TP
.B SendAsyncMessage
Sends a asynchronous message to the destination window, and calls the window procedure immediately. Note that this function may corrupt your data.
.TP
.B SendNotifyMessage
Sends a notification message to the destination window.
.TP
.B BroadcastMessage
Broadcasts a message to all main window on the desktop. 
.TP
.B PostQuitMessage
Puts a MSG_QUIT message into the message queue. 
.TP
.B TranslateMessage
Translates key down and key up message to WM_CHAR message and puts it into message queue. 
.TP
.B DispatchMessage
Dispatchs a message to the destination window's callback procedure. 
.TP
.B ThrowAwayMessages
Removes all messages in the message queue associated with the current window.
.TP
.B TranslateAccelerator
Translates an accelerator key message to WM_COMMAND messge and sends it to window procdure.
.TP
.B NotifyParent
Send notification message to parent.

.SH "miniguiMisc" (3)
.TP
.B Ping
Sends a "\\a" to \fBstdout\fP.
.TP
.B Beep
Same as \fBPing\fP.
.TP
.B Tone
Make a tone by using PC speaker. 
.TP
.B GetOriginalTermIO
Returns the original \fBtermio\fP before MiniGUI startup. 
.TP
.B Draw3DUpThickFrame
Draws a 3D frame looks like up.
.TP
.B Draw3DDownThickFrame
Draws a 3D frame looks like down.
.TP
.B Draw3DUpThinFrame
Like \fBDraw3DUpFrame\fP, but draws a thin frame other than thick frame.
.TP
.B Draw3DDownThinFrame
Like \fBDraw3DDownFrame\fP, but draws a thin frame other than thick frame.
.TP
.B Draw3DBorder
Draws the border of a 3D-look frame.
.TP
.B DisabledTextOut
Output a gray text.
.TP
.B Draw3DControlFrame
Draws a 3D frame for controls. 
.TP
.B DrawFlatControlFrame
Draws a flat frame for controls. 


.SH "miniguiPenBrush" (3)
.TP
.B GetPenColor
Returns the pen color of the DC.
.TP
.B SetPenColor
Sets the pen color of the DC.
.TP
.B GetPenType
Gets the pen type of the DC. So far, this function has no effect.
.TP
.B SetPenType
Sets the pen type of the DC. So far, this function has no effect.
.TP
.B GetBrushColor
Returns the brush color of the DC.
.TP
.B SetBrushColor
Set the brush color of the DC.
.TP
.B GetBrushType
Returns the brush type of the DC. So far, this function has no effect.
.TP
.B SetBrushType
Sets the brush type of the DC. So far, this function has no effect.

.SH "miniguiRect" (3)
.TP
.B SetRect
Sets the rectangle with specified values.
.TP
.B SetRectEmpty
Empties a rectangle.
.TP
.B CopyRect
Copies the coordinates of the source rectangle to the destination rectangle.
.TP
.B IsRectEmpty
Determines whether the specified rectangle is empty. 
.TP
.B EqualRect
Determines whether the two specified rectangles are equal by comparing the coordinates of the upper-left and lower-right corners.
.TP
.B NormalizeRect
Normalizes the rectangle so that both the height and width are positive.
.TP
.B IntersectRect
Calculates the intersection of two source rectangle and places the coordinates of the intersection rectangle into the destination rectangle. 
.TP
.B IsCovered
Determines whether one rectangle is cover another rectangle.
.TP
.B DoesIntersect
Determines whether two rectangles intersect.
.TP
.B UnionRect
Creates the union of two rectangles. 
.TP
.B GetBoundRect
Creates the bound rect of two rectangles. 
.TP
.B SubtractRect
Obtains the rectangles when substracting one rectangle from another. 
.TP
.B OffsetRect
Moves the specified rectangle by the specified offsets. 
.TP
.B InflateRect
Increases or decreases the width and height of the specified rectangle. 
.TP
.B InflateRectToPt
Inflates the rectangle to contain the specified point.
.TP
.B PtInRect
Determines whether the specified point lies within the specified rectangle. 

.SH "miniguiRegion" (3)
.TP
.B InitClipRgn
Initializes a region.
.TP
.B ClipRgnCopy
Copies a source region to the destination region.
.TP
.B ClipRgnIntersect
Gets the intersection of two regions.
.TP
.B GetClipRgnBoundRect
Gets the bounding rect of a region.
.TP
.B SetClipRgn
Sets a region to contain only a rect.
.TP
.B IsEmptyClipRgn
Determines whether a region is an empty region.
.TP
.B EmptyClipRgn
Empties a region.
.TP
.B AddClipRect
Appends a rect to a region.
.TP
.B IntersectClipRect
Intersects a region with a rect.
.TP
.B SubtractClipRect
Substracts a rect from a region.


.SH "miniguiScreen" (3)
.TP
.B SaveScreenBox
Saves screen image in the memory.
.TP
.B SaveCoveredScreenBox
Is similar with \fBSaveScreenBox\fP, but this function will allocate memory for you. 
.TP
.B SaveMainWindowContent
Saves a main window image content into a file in Windows BMP file format. 
.TP
.B PutSavedBoxOnScreen
Puts a pre-saved image in the memory on the screen. 
.TP
.B PutSavedBoxOnDC
Puts a pre-saved image in the memory on the DC.
.TP
.B ScreenCopy
Copies screen ranged in a DC from source point to destination point.

.SH "miniguiString" (3)
.TP
.B strchrfP
Returns a pointer to the first occurrence of the character \fBc\fP in the first \fBn\fP characters of string \fBs\fP. This function is similar with \fBstrchr\fP in ANSI C.
.TP
.B substrlen
Returns the length of the sub-string in the first \fBlen\fP characters of string \fBtext\fP. The sub-string is delimited with \fBdelimiter\fP from other character in the string. This function also returns number of continuous delimiters in \fBnr_delim\fP.

.SH "miniguiSysChar" (3)
.TP
.B GetSysCharset
Gets system character set. 
.TP
.B DoesSupportCharset
Determines whether MiniGUI supports the specified charset
.TP
.B SetSysCharset
Sets system charset to the specified charset.
.TP
.B GetSysCharWidth
Gets the width of the system single-byte character. 
.TP
.B GetSysCCharWidth
Gets the width of the system multi-byte character.
.TP
.B GetSysCharHeight
Gets the height of the system character.
.TP
.B GetSysTabbedTextExtent
Gets the output extent of a formatted string when using system font. 


.SH "miniguiTextOutput" (3)
.TP
.B GetFontHeight
Retrives the height of the current logical font in the DC.
.TP
.B GetMaxFontWidth
Retrives the maximal character width of the current logical font in the DC.
.TP
.B GetTextExtent
Computes the output extent of the text.
.TP
.B GetTabbedTextExtent
Computes the output extent of the formatted text.
.TP
.B GetTextCharacterExtra
Retrives the current intercharacter spacing for the DC.
.TP
.B SetTextCharacterExtra
Sets the intercharacter spacing for the DC and returns the old spacing value.
.TP
.B GetTextAboveLineExtra
Retrives the current spacing above line for the DC.
.TP
.B SetTextAboveLineExtra
Sets the spacing above line for the DC and returns the old value.
.TP
.B GetTextBellowLineExtra
Retrives the current spacing bellow line for the DC.
.TP
.B SetTextBellowLineExtra
Sets the spacing bellow line for the DC and returns the old value.
.TP
.B TextOutLen
Outputs the text.
.TP
.B TabbedTextOutLen
Outputs the formatted text.
.TP
.B TabbedTextOutEx
Writes a character string at a specified location, expanding tabs to the values specified in an anrry of tab-stop positions. Text is written in the currently selected font, background color, and text color.
.TP
.B GetLastTextOutPos
Retrives the last text output position. 
.TP
.B DrawTextEx
Draws formatted text in the specified rectangle.

.SH "miniguiTextParse" (3)
.TP
.B GetTextMCharInfo
Retrives information of multi-byte characters in the string. This function returns the positions of characters in the string in an integer array.
.TP
.B GetTextWordInfo
Retrives information of multi-byte words in the string. This function returns the positions of words in the string in an integer array. This function also returns the information of words in an WORDINFO struct array.
.TP
.B GetFirstMCharLen
Retrives and returns the length of the first multi-byte character in the string.
.TP
.B GetFirstWord
Retrives the information of the first multi-byte character in the string.
.TP
.B GetTextExtentPoint
Computes the width and height of the specified string of text when output the text in limited space. 


.SH "miniguiTimer" (3)
.TP
.B SetTimer
Creates a timer with the specified time-out speed value. 
.TP
.B KillTimer
Destroys the specified timer. 
.TP
.B SetTimerSpeed
Adjusts a timer with the specified time-out speed value.
.TP
.B GetTickCount
Retrieves the number of milliseconds that have elapsed since MiniGUI was started. 

.SH "miniguiWindowClass" (3)
.TP
.B RegisterWindowClass
Registers a window class. Later on, you can create a window of a registered class.
.TP
.B UnregisterWindowClass
Undoes the effect of \fBRegisterWindowClass\fP.  
.TP
.B GetClassName
Retrieves the name of the class to which the specified window belongs.  
.TP
.B GetWindowClassInfo
Retrieves the information of the specified window class. 
.TP
.B SetWindowClassInfo
Sets the information of the specified window class. 

.SH "miniguiLite" (3)
.TP
.B SetDesktopRect
Set desktop rect of server or client, must called before create any window.
.TP
.B GetDesktopRect
Get desktop rect of server or client.
.TP
.B ServerStartup
Call this function to be a server of MiniGUI-Lite.
.TP
.B SetClientScreen
Call this function by server to set the screen of clients.
.TP
.B OnlyMeCanDraw
Call this function by server to disable the screen output of clients.
.TP
.B ClientCanDrawNowEx
Call this function by server to tell the topmost client to refresh its content.
.TP
.B SetTopMostClient
Call this function by server to set the topmost client.
.TP
.B GetClientByPID
Call this function by server to get the client id from PID of client.
.TP
.B Send2TopMostClient
Call this function by server to sent a message to topmost client.
.TP
.B RegisterRequestHandler
Call this function by server to register a request handler.
.TP
.B GetRequestHandler
Get the request handler of specified request id.
.TP
.B get_socket_fd2srv
Call this function by clients to get the socket descriptor connected to server.
.TP
.B cli_request
Call this function by clients to send a request to server.
.TP
.B sock_write
Helper functions for socket writing operation.
.TP
.B sock_read
Helper functions for socket reading operation.


.SH "AUTHOR"
.PP
This manual page was edited by Wei Yongming <ymwei@minigui.org>.
If you have any problems, comments or found some bugs, please send messages to me.
