.\" This manpage is Copyright (C) 2000 Wei Yongming
.\"                               2000 BluePoint Software
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since MiniGUI is constantly changing, this
.\" manual page may be incorrect or out-of-date. The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.TH "Rect" "3" "August 2000" "MiniGUI"

.SH "NAME"
Rect \- Rectangle operations in MiniGUI.

.SH "SYNOPSIS"
.B #include <minigui/gdi.h>
.br

.PP
.BI "void GUIAPI SetRect" "(RECT* prc, int left, int top, int right, int bottom);"
.br
.BI "void GUIAPI SetRectEmpty" "(RECT* prc);"
.br
.BI "void GUIAPI CopyRect" "(RECT* pdrc, const RECT* psrc);"
.br
.BI "BOOL GUIAPI IsRectEmpty" "(const RECT* prc);"
.br
.BI "BOOL GUIAPI EqualRect" "(const RECT* prc1, const RECT* prc2);"
.br
.BI "void GUIAPI NormalizeRect" "(RECT* pRect);"
.br
.BI "BOOL GUIAPI IntersectRect" "(RECT* pdrc, const RECT* psrc1, const RECT* psrc2);"
.br
.BI "BOOL GUIAPI IsCovered" "(const RECT* prc1, const RECT* prc2);"
.br
.BI "BOOL GUIAPI DoesIntersect" "(const RECT* psrc1, const RECT* psrc2);"
.br
.BI "BOOL GUIAPI UnionRect" "(RECT* pdrc, const RECT* psrc1, const RECT* psrc2);"
.br
.BI "void GUIAPI GetBoundRect" "(PRECT pdrc,  const RECT* psrc1, const RECT* psrc2);"
.br
.BI "int GUIAPI SubtractRect" "(RECT* rc, const RECT* psrc1, const RECT* psrc2);"
.br
.BI "void GUIAPI OffsetRect" "(RECT* prc, int x, int y);"
.br
.BI "void GUIAPI InflateRect" "(RECT* prc, int cx, int cy);"
.br
.BI "void GUIAPI InflateRectToPt" "(RECT* prc, int x, int y);"
.br
.BI "BOOL GUIAPI PtInRect" "(const RECT* prc, int x, int y);"
.SH "DESCRIPTION"
.PP
\fBSetRect\fP function sets the rectangle with specified values. A rectangle in MiniGUI is a struct defined as:
.PP
.nf
typedef struct tagRECT
{
    int left;
    int top;
    int right;
    int bottom;
} RECT;
typedef RECT* PRECT;
typedef RECT* LPRECT;
.fi
.PP
\fBSetRectEmpty\fP function empties the rectangle pointed to by \fBprc\fP. A empty rectangle in MiniGUI is a rectangle whose width and height both are zero. This function will sets all coordinates of the rectangle to zero.
.PP
\fBCopyRect\fP function copies the coordinates of the source rectangle pointed to by \fBpsrc\fP to the destination rectangle pointed to by \fBpdrc\fP.
.PP
\fBIsRectEmpty\fP function determines whether the specified rectangle is empty. A empty rectangle is one that has no area; that is, the coordinates of the right side is equal to the coordinate of the left side, or the coordinates of the bottom side is equal to the coordinate of the top side.
.PP
\fBEqualRect\fP function determines whether the two specified rectangles \fB(prc1 and prc2)\fP are equal by comparing the coordinates of the upper-left and lower-right corners.
.PP
\fBNormalizeRect\fP function normalizes the rectangle pointed to by \fBprc\fP so that both the height and width are positive.
.PP
\fBIntersectRect\fP function calculates the intersection of two source rectangle \fB(psrc1 and psrc2)\fP and places the coordinates of the intersection rectangle into the destination rectangle. If the source rectangls do not intersect, and empty rectangle (in which all coordinates are set to zero) is placed into the destination rectangle.
.PP
\fBIsCovered\fP function determines whether one rectangle \fB(prc1)\fP is cover another rectangle \fB(prc2)\fP.
.PP
\fBDoesIntersect\fP function determines whether two rectangles intersect.
.PP
\fBUnionRect\fP function creates the union \fB(pdrc)\fP of two rectangles \fB(psrc1, psrc2)\fP. The union is the smallest rectangle that contains both source rectangles. This function is different from its Windows version, the source rectangles must be border upon and not stagger.
.PP
\fBGetBoundRect\fP function creates the bound rect \fB(pdrc)\fP of two rectangles \fB(psrc1, prsrc2)\fP. the bound rect is the smallest rectangle that contains both source rectangles.
.PP
\fBSubtractRect\fP function obtains the rectangles when substracting one rectangle from another. \fBrc\fP should be an array of  RECT struct, and may contain at most four rectangles. This function returns the number of result rectangles.
.PP
\fBOffsetRect\fP function moves the specified rectangle by the specified offsets. \fBdx\fP and \fBdy\fP specify the amount to move the rectangle left/right or up/down respectively. \fBdx\fP must be a negative value to move the rectangle to the left, and \fBdy\fP must be a negative value to move the rectangle up.
.PP
\fBInflateRect\fP function increases or decreases the width and height of the specified rectangle. This function adds \fBdx\fP units to the left and right ends of the rectangle and \fBdy\fP units to the top and bottom. the \fBdx\fP and \fBdy\fP are signed values; positive values increases the width and height, and negative values decreases them.
.PP
\fBInflateRectToPt\fP function inflates the rectangle to contain the specified point \fB(x, y)\fP.
.PP
\fBPtInRect\fP function determines whether the specified point lies within the specified rectangle. A point is within a rectangle if it lies on the left or top side or is within all four sides. A point on the right or bottom side is considered outside the rectangle.

.SH "NOTE"
.PP
Note that some rectangle functions in MiniGUI are not equivalents of their Windows version. The following macros can help you determine the width and height of a rectangle object:
.nf
#define RECTWP(prc)  (prc->right - prc->left)
#define RECTHP(prc)  (prc->bottom - prc->top)
#define RECTW(rc)    (rc.right - rc.left)
#define RECTH(rc)    (rc.bottom - rc.top)
.fi

.SH "SEE ALSO"
.PP
.BR GetClipRgnBoundRect (3),
.BR SubtractClipRect (3)

.SH "AUTHOR"
.PP
This manual page was edited by WEI Yongming (ymwei@minigui.org)
If you have any problems, comments or found some bugs, please send messages to me.
